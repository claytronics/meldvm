
type route input(node, node, float).
type route output(node, node, float).

type linear pagerank(node, float).
type linear input-rank(node, node, float).
type linear start(node).
type linear update(node).
type linear new-input-rank(node, node, float).
type linear add-input-ranks(node).
type linear sum-ranks(node, float).
type linear input-rank-copy(node, node, float).
type linear output-rank(node, node, float).
type linear output-rank-copy(node, node, float).
type linear new-output-rank(node, node, float).

priority @initial 100.
//priority @cluster @static.

const damping = 0.15.
const bound = str2float(@arg1).
const pages = @world.
const start-pagerank = 1.0 / float(pages).

start(A).

start(A) -o { B, W | !input(A, B, W) | input-rank(A, B, start-pagerank)},
            { B, W | !output(A, B, W) | output-rank(A, B, 0.0) },
            pagerank(A, start-pagerank),
            update(A).

new-input-rank(A, B, V),
input-rank(A, B, OldV)
   -o input-rank(A, B, V).

new-output-rank(A, B, V),
output-rank(A, B, OldV)
   -o output-rank(A, B, V).

add-input-ranks(A)
   -o [sum => V | B | input-rank-copy(A, B, V) | sum-ranks(A, V)].

sum-ranks(A, Acc),
V = damping/float(pages) + (1.0 - damping) * Acc,
pagerank(A, Old)
   -o pagerank(A, V),
      {B, W, O, Delta | !output(A, B, W), output-rank-copy(A, B, O), Delta = (if O > V then O - V else V - O end) * W |
         (if Delta <= bound then (if cpu-id(A) = cpu-id(B) then new-input-rank(B, A, V) otherwise 1 end) otherwise
         new-input-rank(B, A, V), update(B), (if cpu-id(A) = cpu-id(B) then set-priority(B, Delta) otherwise 1 end) end)}.

update(A), update(A) -o update(A).

update(A)
   -o {B, V, W | input-rank(A, B, V), !input(A, B, W) | input-rank(A, B, V), input-rank-copy(A, B, V * W) , new-output-rank(B, A, V)},
      {B, V | output-rank(A, B, V) | output-rank-copy(A, B, V), output-rank(A, B, V)},
      add-input-ranks(A).

