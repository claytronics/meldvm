type route input(node, node, float).
type route output(node, node, float).

type linear pagerank(node, float).
type linear neighbor-rank(node, node, float).
type linear start(node).
type linear update(node).
type linear new-neighbor-rank(node, node, float).
type linear add-neighbor-ranks(node).
type linear sum-ranks(node, float).
type linear neighbor-rank-copy(node, node, float).
type linear check-residual(node, float, float).

type numOutput(node, int).
type numInput(node, int).

priority @initial 100.

const damping = 0.85.
const bound = 0.01.
const pages = @world.

start(A).

start(A) -o [count => C | B, W | !output(A, B, W) | !numOutput(A, C)],
            [count => C | B, W | !input(A, B, W) | !numInput(A, C)],
            { B, W | !input(A, B, W) | neighbor-rank(A, B, 1.0 / float(pages))},
            pagerank(A, 1.0 / float(pages)),
            update(A).

add-neighbor-ranks(A)
   -o [sum => X | B | neighbor-rank-copy(A, B, X) | sum-ranks(A, X)].

check-residual(A, Res, Rank),
Res > bound
   -o {B, W | !output(A, B, W) | update(B), new-neighbor-rank(B, A, Rank)}.
check-residual(A, _, Rank)
   -o {B, W | !output(A, B, W) | new-neighbor-rank(B, A, Rank)}.

sum-ranks(A, Acc),
!numInput(A, T),
V = damping + (1.0 - damping) * Acc,
pagerank(A, Old)
   -o pagerank(A, V),
      check-residual(A, if Old > V then Old - V else V - Old end, V).

new-neighbor-rank(A, B, V),
neighbor-rank(A, B, OldV)
   -o neighbor-rank(A, B, V).

update(A), update(A) -o update(A).

update(A)
   -o {B, V | neighbor-rank(A, B, V) | neighbor-rank(A, B, V), neighbor-rank-copy(A, B, V) },
   add-neighbor-ranks(A).
