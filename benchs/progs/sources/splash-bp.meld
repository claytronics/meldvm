
type route edge(node, node).
type potential(node, :(float, float, float, float, float)).

type linear belief(node, :(float, float, float, float, float)).
type linear new-neighbor-belief(node, node, :(float, float, float, float, float)). // neighbor sent an update
type linear sent-neighbor-belief(node, node, :(float, float, float, float, float)). // what we sent previously
type linear neighbor-belief(node, node, :(float, float, float, float, float)). // current neighbor belief
type linear neighbor-belief-copy(node, :(float, float, float, float, float)).
type linear neighbor-belief-old(node, node, :(float, float, float, float, float)).

type linear start(node).
type linear update(node).
type linear copy-messages(node).
type linear sum-messages(node, :(float, float, float, float, float)).
type linear update-messages(node, :(float, float, float, float, float)).
type linear check-residual(node, node, float, :(float, float, float, float, float)).

type linear token(node, list node, list node).
type linear waiting(node).
type linear first-phase(node, list node, list node).
type linear send-token(node, list node, list node).
type linear second-phase(node, list node, node).

priority @initial 100.
priority @static.
priority @cluster @static.

const global-potential =  :(-0.0, -2.0, -4.0, -6.0, -8.0, -2.0, -0.0, -2.0, -4.0, -6.0, -4.0, -2.0, -0.0, -2.0, -4.0, -6.0, -4.0, -2.0, -0.0, -2.0, -8.0, -6.0, -4.0, -2.0, -0.0).
const initial-message = :(-1.60944, -1.60944, -1.60944, -1.60944, -1.60944).
const initial-belief = :(-1.609438, -1.609438, -1.609438, -1.609438, -1.609438).
const damping = 0.1.
const bound = 0.0001.
//const bound = str2float(@arg2).
const maxnodes = str2int(@arg1).

// setups initial node belief and some other things
start(A) -o belief(A, initial-belief),
            {B | !edge(A, B) | neighbor-belief(A, B, initial-message),
                               sent-neighbor-belief(A, B, initial-message)},
            waiting(A).

// TREE BUILDING RULES

// a node just received the token and is being asked to become
// part of splash tree
// we first delete "waiting" and keep the token
waiting(A),
token(A, All, Next)
   -o token(A, All, Next).

// this rule is run for the root of the tree
// note that the root does not run the previous
// rule since it does not receive a token
waiting(A),
nodepriority(A) > 0.0
   -o token(A, [A], [A]).

// if the number of nodes in the tree exceed the limit
// we may start phase 1 of the algorithm (leaves -> root)
// NOTE: node 'A' is in All (in the last position)
token(A, All, Next),
nodelistlength(All) > maxnodes
   -o first-phase(A, All, nodelistreverse(All)).

// All is still not big enough, so we grab all neighbors not yet in the tree
// or not yet schedule to be visited in Next.
token(A, All, [A | Next])
   -o [collect => L | !edge(A, L),
         0 = nodelistcount(All, L), 0 = nodelistcount(Next, L),
         nodepriority(L) > 0.0, cpu-id(L) = cpu-id(A) | send-token(A, All, nodelistappend(Next, L))].

// the previous rule forces the token to be sent to the next node
// we schedule node B to be run and send the token to it
send-token(A, All, []) -o first-phase(A, All, nodelistreverse(All)).
send-token(A, All, [B | Next]) -o schedule-next(B), token(B, nodelistappend(All, [B]), [B | Next]).

// RULES FOR FIRST PHASE

first-phase(A, [A], [A]) -o second-phase(A, [], A).
// we are currently in some node 'A' running the first phase
// and this is the last node
// we still have to run the 'update' function
// but we'll start the second phase on 'B'
first-phase(A, [A, B | Next], [A])
   -o update(A), schedule-next(B), second-phase(B, [B | Next], A).
// in this case, the first phase is not yet done
// we run the update function on 'A' and send the first phase fact to 'B'
first-phase(A, All, [A, B | Next])
   -o update(A), schedule-next(B), first-phase(B, All, [B | Next]).

// RULES FOR SECOND PHASE

// this only happens when the tree had only a single node.
// we must run the update, since it was not run in the first pass.
second-phase(A, [], _) -o set-priority(A, 0.0), waiting(A), update(A).
// in this rule, we are running the second phase on the last node (last node in the tree)
// note that we need to send 'waiting' to the previous node and to this node
// we also make sure the priority of this node is 0 so we don't start
// building a tree from this node (see 2nd rule of tree building)
second-phase(A, [A], Back)
   -o update(A), waiting(Back), waiting(A), set-priority(A, 0.0).
// running second phase but not yet done
// we run the update function on 'A' and send the token to 'B'
// note that we always need to derive back the 'waiting' on 'Back'
// so that this node can become part of a splash tree later on.
second-phase(A, [A, B | Next], Back)
   -o update(A), waiting(Back), schedule-next(B), second-phase(B, [B | Next], A).

// NORMAL CODE STARTS HERE

start(A).

// ... adding them up
sum-messages(A, L1), neighbor-belief-copy(A, L2)
   -o sum-messages(A, addfloatstructs(L1, L2)).

// ... no more beliefs to add
sum-messages(A, NewBelief),
Normalized = normalizestruct(NewBelief)
   -o update-messages(A, Normalized), belief(A, Normalized).

// checks residual for setting priorities
check-residual(A, B, Delta, OutMessage),
!edge(A, B),
Delta > bound
   -o set-priority(B, Delta), new-neighbor-belief(B, A, OutMessage).

check-residual(A, B, Delta, OutMessage),
!edge(A, B)
   -o new-neighbor-belief(B, A, OutMessage).

// new neighbor beliefs
neighbor-belief(A, B, Belief),
new-neighbor-belief(A, B, NewBelief)
   -o neighbor-belief(A, B, NewBelief).

// update belief to be sent to one neighbor
update-messages(A, NewBelief),
!edge(A, B),
neighbor-belief-old(A, B, OldIn),
sent-neighbor-belief(A, B, OldOut),
Cavity = normalizestruct(dividestruct(NewBelief, OldIn)),
Convolved = normalizestruct(convolvestruct(global-potential, Cavity)),
OutMessage = dampstruct(Convolved, OldOut, damping)
   -o check-residual(A, B, residualstruct(OutMessage, OldOut), OutMessage),
      update-messages(A, NewBelief),
      sent-neighbor-belief(A, B, OutMessage).

// all beliefs were sent!
update-messages(A, NewBelief) -o 1.

// make a copy of neighbors beliefs in order to add them up
update(A),
!potential(A, Potential),
belief(A, MyBelief)
   -o {B, Belief | neighbor-belief(A, B, Belief) | neighbor-belief-old(A, B, Belief), neighbor-belief-copy(A, Belief), neighbor-belief(A, B, Belief)},
      sum-messages(A, Potential).

