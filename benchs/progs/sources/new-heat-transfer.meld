
type inbound(node, int).
type route edge(node, node, float).
type coord(node, int, int).
type inner(node).
type linear heat(node, float).
type linear neighbor-heat(node, node, float).
type linear neighbor-heat-copy(node, node, float).
type linear new-neighbor-heat(node, node, float).
type linear start(node).
type linear wait(node, int).
type linear update(node).
type linear sum-heats(node).
type linear new-heat(node, float, float).

priority @order @desc.
//priority @cluster @static.
priority @initial 100.

const epsilon = str2float(@arg1).
const delta = str2float(@arg2).

start(A).

start(A), heat(A, H), !inbound(A, T) -o {B, W | !edge(A, B, W) | new-neighbor-heat(B, A, H)},
                                        wait(A, T),
                                        heat(A, H).

new-neighbor-heat(A, B, Heat),
neighbor-heat(A, B, OldHeat)
   -o neighbor-heat(A, B, Heat).

sum-heats(A),
heat(A, H),
!inbound(A, T)
   -o [sum => X | B | neighbor-heat-copy(A, B, X) | new-heat(A, (X + H) / float(T + 1), H)].

new-heat(A, New, Old),
Diff = if (New - Old > 0.0) then (New - Old) else (Old - New) end
   -o {B, W | !edge(A, B, W) | new-neighbor-heat(B, A, New), (if Diff > epsilon then update(B) otherwise 1 end), (if Diff > delta then set-priority(B, Diff) otherwise 1 end)},
      heat(A, New).

new-neighbor-heat(A, B, Heat),
wait(A, T),
T > 0
   -o wait(A, T - 1),
      neighbor-heat(A, B, Heat).

wait(A, 0)
   -o update(A).

update(A), update(A) -o update(A).
update(A)
   -o {B, H | neighbor-heat(A, B, H) | neighbor-heat-copy(A, B, H), neighbor-heat(A, B, H)},
      sum-heats(A).
