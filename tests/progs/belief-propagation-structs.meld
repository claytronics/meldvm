
include #data/bp-data20-structs.meld

type route edge(node, node).
type potential(node, :(float, float, float, float, float)).
type coord(node, int).

type linear belief(node, :(float, float, float, float, float)).
type linear new-neighbor-belief(node, node, :(float, float, float, float, float)). // neighbor sent an update
type linear sent-neighbor-belief(node, node, :(float, float, float, float, float)). // what we sent previously
type linear neighbor-belief(node, node, :(float, float, float, float, float)). // current neighbor belief
type linear neighbor-belief-copy(node, :(float, float, float, float, float)).
type linear neighbor-belief-old(node, node, :(float, float, float, float, float)).

type linear start(node).
type linear update(node).
type linear sum-messages(node, :(float, float, float, float, float)).
type linear update-messages(node, :(float, float, float, float, float)).
type linear check-residual(node, node, float, :(float, float, float, float, float)).

const global-potential =  :(-0.0, -2.0, -4.0, -6.0, -8.0, -2.0, -0.0, -2.0, -4.0, -6.0, -4.0, -2.0, -0.0, -2.0, -4.0, -6.0, -4.0, -2.0, -0.0, -2.0, -8.0, -6.0, -4.0, -2.0, -0.0).
const initial-message = :(-1.60944, -1.60944, -1.60944, -1.60944, -1.60944).
const initial-belief = :(-1.609438, -1.609438, -1.609438, -1.609438, -1.609438).
const damping = 0.1.
const bound = 0.1.
//const bound = str2float(@arg1).

start(A).

// setups initial node belief and some other things
start(A) -o belief(A, initial-belief),
            {B | !edge(A, B) | neighbor-belief(A, B, initial-message),
                               sent-neighbor-belief(A, B, initial-message)},
            update(A).

// new neighbor beliefs
neighbor-belief(A, B, Belief),
new-neighbor-belief(A, B, NewBelief)
   -o neighbor-belief(A, B, NewBelief).

// ... adding them up
sum-messages(A, L1), neighbor-belief-copy(A, L2)
   -o sum-messages(A, addfloatstructs(L1, L2)).

// ... no more beliefs to add
sum-messages(A, NewBelief),
Normalized = normalizestruct(NewBelief)
   -o update-messages(A, Normalized), belief(A, Normalized).

// checks residual for setting priorities
check-residual(A, B, Delta, OutMessage),
!edge(A, B),
Delta > bound
   -o update(B), new-neighbor-belief(B, A, OutMessage).

check-residual(A, B, Delta, OutMessage),
!edge(A, B)
   -o new-neighbor-belief(B, A, OutMessage).

// update belief to be sent to one neighbor
update-messages(A, NewBelief),
!edge(A, B),
neighbor-belief-old(A, B, OldIn),
sent-neighbor-belief(A, B, OldOut),
Cavity = normalizestruct(dividestruct(NewBelief, OldIn)),
Convolved = normalizestruct(convolvestruct(global-potential, Cavity)),
OutMessage = dampstruct(Convolved, OldOut, damping)
   -o check-residual(A, B, residualstruct(OutMessage, OldOut), OutMessage),
      update-messages(A, NewBelief),
      sent-neighbor-belief(A, B, OutMessage).

// all beliefs were sent!
update-messages(A, NewBelief) -o 1.

// if we have two update functions, just run one of them
update(A), update(A) -o update(A).

// make a copy of neighbors beliefs in order to add them up
update(A),
!potential(A, Potential),
belief(A, MyBelief)
   -o {B, Belief | neighbor-belief(A, B, Belief) |
            neighbor-belief-old(A, B, Belief), neighbor-belief-copy(A, Belief),
            neighbor-belief(A, B, Belief)},
      sum-messages(A, Potential).
